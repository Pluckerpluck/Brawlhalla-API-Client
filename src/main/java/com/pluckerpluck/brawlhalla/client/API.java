package com.pluckerpluck.brawlhalla.client;

import java.io.IOException;
import java.util.List;

import com.pluckerpluck.brawlhalla.client.types.BasicPlayer;
import com.pluckerpluck.brawlhalla.client.types.Bracket;
import com.pluckerpluck.brawlhalla.client.BrawlhallaService;
import com.pluckerpluck.brawlhalla.client.types.RankedPlayer;
import com.pluckerpluck.brawlhalla.client.types.Region;

import okhttp3.HttpUrl;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import retrofit2.Call;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class API {

	private static final String API_BASE_URL = "https://api.brawlhalla.com";

	private final BrawlhallaService service;

	/**
	 * Construct an API that will talk to a custom URL
	 */
	public API(String apiKey, String baseURL) {
		OkHttpClient.Builder httpClient = new OkHttpClient.Builder();

		// Add interceptor to add API key to all calls to the server
		httpClient.addInterceptor(new Interceptor() {
			@Override
			public Response intercept(Chain chain) throws IOException {
				Request original = chain.request();
				HttpUrl originalHttpUrl = original.url();

				HttpUrl url = originalHttpUrl.newBuilder().addQueryParameter("api_key", apiKey).build();

				// Request customization: add request headers
				Request.Builder requestBuilder = original.newBuilder().url(url);

				Request request = requestBuilder.build();
				return chain.proceed(request);
			}
		});

		OkHttpClient client = httpClient.build();
		Retrofit retrofit = new Retrofit.Builder().baseUrl(baseURL)
				.addConverterFactory(GsonConverterFactory.create()).client(client).build();

		service = retrofit.create(BrawlhallaService.class);

		
	}

	/**
	 * Construct an API that talks to the brawlhalla server
	 */
	public API(String apiKey) {
		this(apiKey, API_BASE_URL);
	}



	public BasicPlayer search(String steamID) throws IOException {
		Call<BasicPlayer> search = service.search(steamID);
		return call(search);
	}


	public List<RankedPlayer> getRankingsPage(Bracket bracket, Region region, int page) throws IOException {
		Call<List<RankedPlayer>> search = service.rankings(bracket, region, page, null);
		return call(search);
	}

	
	private <T> T call(Call<T> call) throws IOException {
		//System.out.println(call.execute().raw().toString());
		return call.execute().body();
	}
}
